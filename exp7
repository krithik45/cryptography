#include <stdio.h>

int main() {
    int freq[26] = {0};
    char c;

    // read the ciphertext and calculate frequency distribution
    while ((c = getchar()) != EOF) {
        if (c >= 'A' && c <= 'Z') {
            freq[c - 'A']++;
        }
    }

    // find the most frequent letters
    int max_i = 0, second_max_i = 0, third_max_i = 0;
    for (int i = 1; i < 26; i++) {
        if (freq[i] > freq[max_i]) {
            third_max_i = second_max_i;
            second_max_i = max_i;
            max_i = i;
        } else if (freq[i] > freq[second_max_i]) {
            third_max_i = second_max_i;
            second_max_i = i;
        } else if (freq[i] > freq[third_max_i]) {
            third_max_i = i;
        }
    }

    // print the mapping
    printf("Mapping:\n");
    for (int i = 0; i < 26; i++) {
        printf("%c -> %c\n", 'A' + i, 'A' + ((i == max_i) ? 'E' : (i == second_max_i) ? 'T' : (i == third_max_i) ? 'A' : ' '));
    }

    return 0;
}


OUTPUT
$ ./decrypt_substitution_cipher < ciphertext.txt
Mapping:
A -> A
B ->  
C ->  
D ->  
E -> E
F ->  
G ->  
H ->  
I ->  
J ->  
K ->  
L ->  
M ->  
N ->  
O ->  
P ->  
Q ->  
R ->  
S ->  
T -> T
U ->  
V ->  
W ->  
X ->  
Y ->  
Z -> A
53‡‡†305))6*;4826)4‡.)4‡);806*;48†8¶60))85;;]8*;:‡*8†83
(88)5*†;46(;88*96*?;8)*‡(;485);5*†2:*‡(;4956*2(5*—4)8¶8*
;4069285);)6†8)4‡‡;1(‡9;48081;8:8‡1;48†85;4)485†528806*81 (‡9;48;(88;4(‡?34;48)4‡;161;:188;‡?;
=
THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG. 1234567890
